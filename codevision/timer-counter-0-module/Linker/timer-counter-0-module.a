;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : timer-counter-0-module
;Version : 1.0.0
;Date    : 7/5/2017
;Author  : melika barzegaran hosseini 9231035 - soroush kavousi 9231077
;Company :
;Comments:
;a script to test whether the timer/counter #0 module works correctly
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;/*****************************************************
;instructions:
;0. fuse bit setup:
;    - CKSEL[3:0] = 1111
;    - CKOPT = 0
;    - SUT[1:0] = 11
;1. enable led module (JP1).
;2. disable buzzer module (JP2).
;3. disable 7segment module (JP3).
;4. diable pwm module (JP4).
;5. disable analog comparator module (JP5 and JP6).
;6. remove the lcd from the board.
;*****************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;int total_overflow;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 002C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002D     // increase the number of times overflow has occured by one.
; 0000 002E     total_overflow++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002F 
; 0000 0030     // check if overflow has occured for 4 times (equivalent to 1 second delay with 1(MHz) cpu speed and 1024 prescaler).
; 0000 0031     if(total_overflow == 4)
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0032     {
; 0000 0033         // if then, toggle the led.
; 0000 0034         PORTB.0 = !PORTB.0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0035 
; 0000 0036         // and start counting from the begining.
; 0000 0037         TCNT0 = 0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0038         total_overflow = 0;
;PCODE: $00000021 VOL: 0
; 0000 0039     }
; 0000 003A }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;void main(void)
; 0000 003D {
;PCODE: $00000026 VOL: 0
; 0000 003E     // make the led D1 port output and turn it on.
; 0000 003F     DDRB = 0x01;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0040     PORTB = 0x01;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0041 
; 0000 0042     // setup timer/counter #0.
; 0000 0043     TCNT0=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0044     OCR0=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0045 
; 0000 0046     // enable timer/counter #0 mode as normal.
; 0000 0047     TCCR0 = (0 << WGM01) | (0 << WGM00);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0048 
; 0000 0049     // enable timer/counter #0 prescaler as 1024.
; 0000 004A     TCCR0 |= (1 << CS02) | (0 << CS01) | (1 << CS00);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 004B 
; 0000 004C     // enable timer/counter #0 overflow interrupt.
; 0000 004D     TIMSK |= (1 << TOIE0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004E 
; 0000 004F     // initalize the number of timer/counter #0's overflows as 0.
; 0000 0050     total_overflow = 0;
;PCODE: $00000037 VOL: 0
; 0000 0051 
; 0000 0052     // enable interrupts.
; 0000 0053     #asm("sei")
;PCODE: $00000038 VOL: 0
	sei
;PCODE: $00000039 VOL: 0
; 0000 0054 
; 0000 0055     // endless loop.
; 0000 0056     while (1);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0057 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
