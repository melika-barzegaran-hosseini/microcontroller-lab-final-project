;
;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : external-clock-module
;Version : 1.0.0
;Date    : 7/6/2017
;Author  : melika barzegaran hosseini 9231035 - soroush kavousi 9231077
;Company :
;Comments:
;a script to test whether the analog comparator module works correctly
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;/*****************************************************
;instructions:
;0. fuse bit setup:
;    - CKSEL[3:0] = 0001
;    - CKOPT = 1
;    - SUT[1:0] = 10
;1. enable led module (JP1).
;2. disable buzzer module (JP2).
;3. disable 7segment module (JP3).
;4. disable pwm module (JP4).
;5. enable analog comparator module (JP5 and JP6).
;6. remove the lcd from the board.
;*****************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;void main(void)
; 0000 002B {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 002C     // make the led D1 port output and turn it off.
; 0000 002D     DDRB = 0x01;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 002E 	PORTB = 0x00;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002F 
; 0000 0030     // enable analog comparator interrupt mode as rising edge.
; 0000 0031     ACSR |= (1 << ACIS1) | (1 << ACIS0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0032 
; 0000 0033     // enable interrupts.
; 0000 0034     #asm("sei")
;PCODE: $00000015 VOL: 0
	sei
;PCODE: $00000016 VOL: 0
; 0000 0035 
; 0000 0036     // endless loop.
; 0000 0037     while (1)
;PCODE: $00000017 VOL: 0
; 0000 0038     {
; 0000 0039         int compare = ACSR & 0x20;
; 0000 003A         if(compare == 0x20)
;PCODE: $00000018 VOL: 0
;	compare -> Y+0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003B         {
; 0000 003C             //turn the led off if AIN0 > AIN1.
; 0000 003D             PORTB = 0x01;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003E         }
; 0000 003F         else
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0040         {
; 0000 0041             //turn the led off if AIN0 < AIN1.
; 0000 0042             PORTB = 0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0043         }
;PCODE: $00000026 VOL: 0
; 0000 0044     }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0045 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
