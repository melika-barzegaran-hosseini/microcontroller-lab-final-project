;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : matrix-keyboard-lcd-module
;Version : 1.0.0
;Date    : 7/5/2017
;Author  : melika barzegaran hosseini 9231035 - soroush kavousi 9231077
;Company :
;Comments:
;a script to test whether the interrupt-based matrix keyboard and the lcd module work correctly together
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;/*****************************************************
;instructions:
;0. fuse bit setup:
;    - CKSEL[3:0] = 0001
;    - CKOPT = 1
;    - SUT[1:0] = 10
;1. disable led module (JP1).
;2. disable buzzer module (JP2).
;3. disable 7segment module (JP3).
;4. diable pwm module (JP4).
;5. disable analog comparator module (JP5 and JP6).
;7. add the lcd to the board.
;*****************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;
;void delay();
;void show(int number);
;
;//define an array to hold bits to show numbers in a common-anode 7segment.
;unsigned char* symbols[16] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"};

	.DSEG
_0x3:
	.BYTE 0x20
;
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0032 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0033     //pull up all the rows except the first row.
; 0000 0034     //if the first row is the target, find the target column and show the number.
; 0000 0035     PORTA = 0b11101111;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0036     delay();
;PCODE: $00000011 VOL: 0
; 0000 0037     if(PINA.0 == 0) show(0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0038     if(PINA.1 == 0) show(1);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0039     if(PINA.2 == 0) show(2);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 003A     if(PINA.3 == 0) show(3);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003B 
; 0000 003C     //pull up all the rows except the second row.
; 0000 003D     //if the second row is the target, find the target column and show the number.
; 0000 003E     PORTA = 0b11011111;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003F     delay();
;PCODE: $00000030 VOL: 0
; 0000 0040     if(PINA.0 == 0) show(4);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0041     if(PINA.1 == 0) show(5);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0042     if(PINA.2 == 0) show(6);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0043     if(PINA.3 == 0) show(7);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0044 
; 0000 0045     //pull up all the rows except the third row.
; 0000 0046     //if the third row is the target, find the target column and show the number.
; 0000 0047     PORTA = 0b10111111;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0048     delay();
;PCODE: $0000004F VOL: 0
; 0000 0049     if(PINA.0 == 0) show(8);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004A     if(PINA.1 == 0) show(9);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004B     if(PINA.2 == 0) show(10);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004C     if(PINA.3 == 0) show(11);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 004D 
; 0000 004E     //pull up all the rows except the fourth row.
; 0000 004F     //if the fourth row is the target, find the target column and show the number.
; 0000 0050     PORTA = 0b01111111;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0051     delay();
;PCODE: $0000006E VOL: 0
; 0000 0052     if(PINA.0 == 0) show(12);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0053     if(PINA.1 == 0) show(13);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0054     if(PINA.2 == 0) show(14);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0055     if(PINA.3 == 0) show(15);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0056 
; 0000 0057     // change configurations to normal.
; 0000 0058     PORTA = 0x0F;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0059 }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;
;void delay()
; 0000 005C {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 005D     // make a delay so that the microcontroller syncs between PIN and PORT registers.
; 0000 005E     delay_ms(1);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 005F }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;
;void show(int number)
; 0000 0062 {
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0063     // clear the lcd.
; 0000 0064     lcd_clear();
;PCODE: $00000099 VOL: 0
;	number -> Y+0
;PCODE: $0000009A VOL: 0
; 0000 0065 
; 0000 0066     // show the number on the lcd.
; 0000 0067     lcd_puts(symbols[number]);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0068 }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;
;void main(void)
; 0000 006B {
;PCODE: $000000A5 VOL: 0
; 0000 006C     // define columns as input and rows as output.
; 0000 006D     // pull up columns and pull down rows.
; 0000 006E     DDRA = 0xF0;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 006F     PORTA = 0x0F;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0070 
; 0000 0071     // make lcd ports output.
; 0000 0072     // turn the lcd off.
; 0000 0073     DDRC = 0xFF;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0074     PORTC = 0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0075 
; 0000 0076     // define external interrupt #0 output and pull it up.
; 0000 0077     // it is so important to pull this pin. if it is not pulled up, no interrupt
; 0000 0078     // would be generated whenever a switch is pressed.
; 0000 0079     DDRD = 0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 007A     PORTD = 0x08;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 007B 
; 0000 007C     // enable external interrupt #1.
; 0000 007D     GICR = 0x80;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 007E 
; 0000 007F     // make the switches sensitive to low level.
; 0000 0080     MCUCR = 0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0081 
; 0000 0082     // setup the lcd.
; 0000 0083     lcd_init(16);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0084     lcd_puts("hello world!");
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0085 
; 0000 0086     // enable interrupts.
; 0000 0087     #asm("sei")
;PCODE: $000000BB VOL: 0
	sei
;PCODE: $000000BC VOL: 0
; 0000 0088 
; 0000 0089     // endless loop.
; 0000 008A     while (1);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 008B }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0

	.DSEG
_0x15:
	.BYTE 0xD
